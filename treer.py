import os
import sys
import datetime
from pathlib import Path

def print_banner():
    banner = """
╔═══════════════════════════════════════╗
║               treer                   ║
║      file tree generator tool         ║
╚═══════════════════════════════════════╝
"""
    print(banner)

def print_progress_bar(current, total, bar_length=40):
    if total == 0:
        return
    
    percent = int((current / total) * 100)
    filled_length = int(bar_length * current // total)
    bar = '█' * filled_length + '─' * (bar_length - filled_length)
    
    sys.stdout.write(f'\rprogress: [{bar}] {percent}% ({current}/{total})')
    sys.stdout.flush()
    
    if current == total:
        print()

def count_items(directory_path, filter_mode, filter_extensions):
    total = 0
    for root, dirs, files in os.walk(directory_path):
        total += len(dirs)
        if filter_mode == 'all':
            total += len(files)
        elif filter_mode == 'include':
            for file in files:
                if any(file.lower().endswith(ext.lower()) for ext in filter_extensions):
                    total += 1
        elif filter_mode == 'exclude':
            for file in files:
                if not any(file.lower().endswith(ext.lower()) for ext in filter_extensions):
                    total += 1
    return total

def should_include_file(filename, filter_mode, filter_extensions):
    if filter_mode == 'all':
        return True
    elif filter_mode == 'include':
        return any(filename.lower().endswith(ext.lower()) for ext in filter_extensions)
    elif filter_mode == 'exclude':
        return not any(filename.lower().endswith(ext.lower()) for ext in filter_extensions)
    return True

def generate_file_tree(directory_path, filter_mode='all', filter_extensions=None):
    if filter_extensions is None:
        filter_extensions = []
    
    processed_items = [0]
    total_items = count_items(directory_path, filter_mode, filter_extensions)
    
    def write_tree(path, prefix="", is_last=True, file_handle=None):
        path_obj = Path(path)
        
        if not path_obj.exists():
            return
            
        connector = "└── " if is_last else "├── "
        
        file_handle.write(f"{prefix}{connector}{path_obj.name}\n")
        
        if path_obj.is_dir():
            try:
                items = []
                for item in path_obj.iterdir():
                    if item.is_dir() or should_include_file(item.name, filter_mode, filter_extensions):
                        items.append(item)
                
                items = sorted(items, key=lambda x: (not x.is_dir(), x.name.lower()))
                
                for i, item in enumerate(items):
                    processed_items[0] += 1
                    print_progress_bar(processed_items[0], total_items)
                    
                    is_last_item = (i == len(items) - 1)
                    extension = "    " if is_last else "│   "
                    new_prefix = prefix + extension
                    
                    if item.is_dir() or should_include_file(item.name, filter_mode, filter_extensions):
                        write_tree(item, new_prefix, is_last_item, file_handle)
                    
            except PermissionError:
                extension = "    " if is_last else "│   "
                file_handle.write(f"{prefix}{extension}[access denied]\n")
    
    folder_name = Path(directory_path).name
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    script_dir = Path(__file__).parent
    output_filename = script_dir / f"{folder_name}_tree_{timestamp}.txt"
    
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write("treer - file tree generator\n")
        f.write(f"file tree for: {directory_path}\n")
        f.write(f"generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        if filter_mode != 'all':
            f.write(f"filter mode: {filter_mode} {', '.join(filter_extensions)}\n")
        f.write("=" * 60 + "\n\n")
        
        write_tree(directory_path, file_handle=f)
        
        f.write("\n" + "=" * 60 + "\n")
        
        total_dirs = 0
        total_files = 0
        for root, dirs, files in os.walk(directory_path):
            total_dirs += len(dirs)
            if filter_mode == 'all':
                total_files += len(files)
            else:
                for file in files:
                    if should_include_file(file, filter_mode, filter_extensions):
                        total_files += 1
        
        f.write(f"total directories: {total_dirs}\n")
        f.write(f"total files: {total_files}\n")
        f.write("\ngenerated by treer\n")
    
    return str(output_filename)

def get_filter_settings():
    choice = input("inclusions(i), exclusions(e), or all(*): ").strip().lower()
    
    if choice in ['', '*', 'all']:
        return 'all', []
    
    filter_mode = None
    if choice in ['i', 'inclusions', 'include']:
        filter_mode = 'include'
        prompt = "include what? "
    elif choice in ['e', 'exclusions', 'exclude']:
        filter_mode = 'exclude'
        prompt = "exclude what? "
    else:
        return 'all', []
    
    extensions = []
    while True:
        user_input = input(prompt).strip()
        if not user_input:
            break
        
        if ',' in user_input:
            for ext in user_input.split(','):
                ext = ext.strip()
                if ext and not ext.startswith('.'):
                    ext = '.' + ext
                if ext:
                    extensions.append(ext)
        else:
            if user_input and not user_input.startswith('.'):
                user_input = '.' + user_input
            if user_input:
                extensions.append(user_input)
    
    return filter_mode, extensions

def main():
    print_banner()
    
    user_input = input("enter directory path: ").strip()
    
    if not os.path.exists(user_input):
        print(f"\nerror: path '{user_input}' does not exist.")
        return
    
    if not os.path.isdir(user_input):
        print(f"\nerror: '{user_input}' is not a directory.")
        return
    
    filter_mode, filter_extensions = get_filter_settings()
    
    print(f"\ngenerating file tree for: {user_input}")
    if filter_mode != 'all':
        print(f"filter mode: {filter_mode} {', '.join(filter_extensions)}")
    print("processing...\n")
    
    try:
        output_file = generate_file_tree(user_input, filter_mode, filter_extensions)
        print(f"\nsuccess! file tree saved to: {output_file}")
        print("\nthank you for using treer!")
    except Exception as e:
        print(f"\nerror generating file tree: {str(e)}")

if __name__ == "__main__":
    main()